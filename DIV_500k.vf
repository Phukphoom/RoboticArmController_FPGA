////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
////////////////////////////////////////////////////////////////////////////////
//   ____  ____ 
//  /   /\/   / 
// /___/  \  /    Vendor: Xilinx 
// \   \   \/     Version : 14.7
//  \   \         Application : sch2hdl
//  /   /         Filename : DIV_500k.vf
// /___/   /\     Timestamp : 12/16/2020 02:36:47
// \   \  /  \ 
//  \___\/\___\ 
//
//Command: sch2hdl -intstyle ise -family spartan6 -verilog C:/Users/Admin/Desktop/RoboticArm/RoboticArm/DIV_500k.vf -w C:/Users/Admin/Desktop/RoboticArm/RoboticArm/DIV_500k.sch
//Design Name: DIV_500k
//Device: spartan6
//Purpose:
//    This verilog netlist is translated from an ECS schematic.It can be 
//    synthesized and simulated, but it should not be modified. 
//
`timescale 100 ps / 10 ps

module CD4CE_HXILINX_DIV_500k(CEO, Q0, Q1, Q2, Q3, TC, C, CE, CLR);
   
   parameter TERMINAL_COUNT = 4'b1001;
   
   output             CEO;
   output             Q0;
   output             Q1;
   output             Q2;
   output             Q3;
   output             TC;

   input 	      C;	
   input 	      CE;	
   input 	      CLR;	
   
   reg                Q0;
   reg                Q1;
   reg                Q2;
   reg                Q3;
   
   always @(posedge C or posedge CLR)
     begin
	if (CLR)
	  {Q3, Q2, Q1, Q0} <= 4'b0000;

	else if (CE)
          begin
             if ({Q3,Q2,Q1,Q0} == 4'b1001)
               {Q3,Q2,Q1,Q0} <= 4'b0000;
             else if({Q3,Q2,Q1,Q0} == 4'b1011)
               {Q3,Q2,Q1,Q0} <= 4'b0110;
             else if({Q3,Q2,Q1,Q0} == 4'b1101)
               {Q3,Q2,Q1,Q0} <= 4'b0100;
             else if({Q3,Q2,Q1,Q0} == 4'b1111)
               {Q3,Q2,Q1,Q0} <= 4'b0010;
            
             else
	      {Q3, Q2, Q1,Q0} <= {Q3, Q2, Q1,Q0} + 1;
          end
     end
   
   assign CEO = TC & CE;
   assign TC = CLR ? 1'b0 : ({Q3, Q2, Q1, Q0} == TERMINAL_COUNT);
   
endmodule
`timescale 1ns / 1ps

module DIV_500k(CLK_IN, 
                CLK_OUT);

    input CLK_IN;
   output CLK_OUT;
   
   wire XLXN_1;
   wire XLXN_8;
   wire XLXN_24;
   wire XLXN_25;
   wire XLXN_27;
   wire XLXN_53;
   wire XLXN_55;
   wire XLXN_56;
   wire XLXN_58;
   wire XLXN_67;
   wire CLK_OUT_DUMMY;
   
   assign CLK_OUT = CLK_OUT_DUMMY;
   (* HU_SET = "XLXI_1_453" *) 
   CD4CE_HXILINX_DIV_500k  XLXI_1 (.C(XLXN_1), 
                                  .CE(XLXN_55), 
                                  .CLR(XLXN_8), 
                                  .CEO(), 
                                  .Q0(), 
                                  .Q1(), 
                                  .Q2(), 
                                  .Q3(), 
                                  .TC(XLXN_24));
   (* HU_SET = "XLXI_2_454" *) 
   CD4CE_HXILINX_DIV_500k  XLXI_2 (.C(CLK_IN), 
                                  .CE(XLXN_55), 
                                  .CLR(XLXN_8), 
                                  .CEO(), 
                                  .Q0(), 
                                  .Q1(), 
                                  .Q2(), 
                                  .Q3(), 
                                  .TC(XLXN_1));
   VCC  XLXI_13 (.P(XLXN_55));
   GND  XLXI_14 (.G(XLXN_8));
   (* HU_SET = "XLXI_15_455" *) 
   CD4CE_HXILINX_DIV_500k  XLXI_15 (.C(XLXN_24), 
                                   .CE(XLXN_55), 
                                   .CLR(XLXN_8), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_25));
   (* HU_SET = "XLXI_16_456" *) 
   CD4CE_HXILINX_DIV_500k  XLXI_16 (.C(XLXN_25), 
                                   .CE(XLXN_55), 
                                   .CLR(XLXN_8), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_27));
   (* HU_SET = "XLXI_17_457" *) 
   CD4CE_HXILINX_DIV_500k  XLXI_17 (.C(XLXN_27), 
                                   .CE(XLXN_55), 
                                   .CLR(XLXN_8), 
                                   .CEO(), 
                                   .Q0(), 
                                   .Q1(), 
                                   .Q2(), 
                                   .Q3(), 
                                   .TC(XLXN_53));
   (* HU_SET = "XLXI_26_458" *) 
   CD4CE_HXILINX_DIV_500k  XLXI_26 (.C(XLXN_53), 
                                   .CE(XLXN_55), 
                                   .CLR(CLK_OUT_DUMMY), 
                                   .CEO(), 
                                   .Q0(XLXN_56), 
                                   .Q1(XLXN_58), 
                                   .Q2(XLXN_67), 
                                   .Q3(), 
                                   .TC());
   AND3B1  XLXI_27 (.I0(XLXN_58), 
                   .I1(XLXN_67), 
                   .I2(XLXN_56), 
                   .O(CLK_OUT_DUMMY));
endmodule
